"use client";
export const dynamic = "force-dynamic";

import { useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";

interface ServerData {
  hetzner_server_id: string;
  server_type: string;
  gpu_type: string;
  ip?: string;
  location?: string;
  status: "creating" | "running" | "error";
}

export default function DashboardPage() {
  const searchParams = useSearchParams();
  const serverId = searchParams.get("serverId"); // ID del servidor recién creado
  const serverName = searchParams.get("serverName"); // Nombre del servidor recién creado
  const [servers, setServers] = useState<ServerData[]>([]);
  const [countdown, setCountdown] = useState(30);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showServersSection, setShowServersSection] = useState(false);

  // 🔹 Fetch de todos los servidores del usuario
  useEffect(() => {
    async function fetchServers() {
      try {
        const res = await fetch(`/api/get-servers?userId=usuario-actual-id`);
        const data: ServerData[] = await res.json();
        setServers(data);
        setLoading(false);
      } catch (err: any) {
        console.error("Error cargando servidores:", err);
        setError(err.message || "Error desconocido");
        setLoading(false);
      }
    }

    fetchServers();
  }, []);

  // 🔹 Contador de 30s para el servidor recién creado
  useEffect(() => {
    if (!serverId) return;

    const timer = setInterval(() => {
      setCountdown((prev) => {
        if (prev <= 1) {
          clearInterval(timer);
          setServers((prevServers) =>
            prevServers.map((s) =>
              s.hetzner_server_id === serverId ? { ...s, status: "running" } : s
            )
          );
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [serverId]);

  // 🔹 Mostrar la sección de servidores después de 15 segundos
  useEffect(() => {
    const timer = setTimeout(() => {
      setShowServersSection(true);
    }, 15000);

    return () => clearTimeout(timer);
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center text-white text-2xl">
        🔄 Cargando servidores...
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center text-red-500 text-2xl">
        ❌ Error: {error}
      </div>
    );
  }

  return (
    <div className="min-h-screen p-6 bg-gray-900 text-white">
      {/* 🚀 Dashboard funcionando correctamente */}
      <div className="flex justify-center items-center mb-10">
        <h1 className="text-4xl font-bold text-center">
          🚀 Dashboard funcionando correctamente
          {serverName ? `: ${serverName}` : ""}
        </h1>
      </div>

      {/* Mostrar la lista de servidores después de 15s */}
      {showServersSection && (
        <>
          <h2 className="text-3xl font-bold mb-6 text-center text-blue-400">SERVIDORES</h2>
          <ul className="space-y-4">
            {servers.map((server) => (
              <li
                key={server.hetzner_server_id}
                className="p-4 border border-gray-700 rounded flex justify-between items-center"
              >
                <div>
                  <p className="font-semibold">{server.server_type}</p>
                  <p>GPU: {server.gpu_type}</p>
                  <p>IP: {server.ip || "Asignando..."}</p>
                  <p>Ubicación: {server.location || "Desconocida"}</p>
                </div>
                <div className="text-right">
                  {server.hetzner_server_id === serverId && server.status === "creating" && (
                    <p>Activando en: {countdown}s</p>
                  )}
                  {server.status === "running" && <p className="text-green-400 font-bold">Activo</p>}
                  {server.status === "error" && <p className="text-red-500 font-bold">Error</p>}
                </div>
              </li>
            ))}
          </ul>
        </>
      )}
    </div>
  );
}
