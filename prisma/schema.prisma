datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Prisma usará la base de datos que pongas en la variable de entorno DATABASE_URL
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  image         String?
  emailVerified DateTime?
  isAdmin       Boolean   @default(false)
  hasPaid       Boolean   @default(false)
  planId        String?   // plan elegido
  servers       Server[]
  accounts      Account[] // relación con NextAuth
  sessions      Session[] // relación con NextAuth
  createdAt     DateTime  @default(now())
}

model Server {
  id        String   @id @default(cuid())
  userId    String
  hetznerId String?  // id retornado por Hetzner
  ip        String?
  planId    String
  state     String   // creating, running, stopped, error
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
